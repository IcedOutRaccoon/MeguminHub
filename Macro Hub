--//VARIABLES
local VIM = game:GetService("VirtualInputManager")
local UIS = game:GetService("UserInputService")
local TS = game:GetService("TweenService")
local CoreGui = game:GetService("StarterGui")
local Player = game.Players.LocalPlayer
local Character = Player.Character
local Mouse = Player:GetMouse()

Player.CharacterAdded:Connect(function(chara)
    Character = chara
end)

--//SET VARIABLES

--Auto Autoclicker
getgenv().AutoClickerEnabled = false
getgenv().AutoClickerSpeed = 0.1
getgenv().AutoClickX = 500
getgenv().AutoClickY = 500

--Auto Key
getgenv().AutoKeyEnabled1 = false
getgenv().Key1 = "W"
getgenv().HoldTime1 = 0.1

getgenv().AutoKeyEnabled2 = false
getgenv().Key2 = "A"
getgenv().HoldTime2 = 0.1

getgenv().AutoKeyEnabled3 = false
getgenv().Key3 = "S"
getgenv().HoldTime3 = 0.1

getgenv().AutoKeyEnabled4 = false
getgenv().Key4 = "D"
getgenv().HoldTime4 = 0.1

--Auto Tool
getgenv().AutoEquipToolEnabled = false
getgenv().AutoToolEnabled = false
getgenv().Tool = "deez nuts"
getgenv().ToolActivateTime = 0.1

--Teleport
getgenv().TweenEnabled = false
getgenv().TweenTime = 1
getgenv().Position = 0,0,0
getgenv().SpamTeleport = false

--//FUNCTIONS
local function Click()
    VIM:SendMouseButtonEvent(getgenv().AutoClickX, getgenv().AutoClickY, 0, true, game, 1)
    VIM:SendMouseButtonEvent(getgenv().AutoClickX, getgenv().AutoClickY, 0, false, game, 1)
end

local function AutoClick()
    while task.wait(0.01) do
        if getgenv().AutoClickerEnabled == true then
            task.wait(getgenv().AutoClickerSpeed)
            Click()
        elseif getgenv().AutoClickerEnabled == false then
            break
        end
    end
end

local function KeyPress1()
    VIM:SendKeyEvent(true, getgenv().Key1, false, game)
    task.wait(getgenv().HoldTime1)
    VIM:SendKeyEvent(false, getgenv().Key1, false, game)
end

local function AutoKeyPress1()
    while task.wait(0.01) do
        if getgenv().AutoKeyEnabled1 == true then
            KeyPress1()
        else
            break
        end
    end
end

local function KeyPress2()
    VIM:SendKeyEvent(true, getgenv().Key2, false, game)
    task.wait(getgenv().HoldTime2)
    VIM:SendKeyEvent(false, getgenv().Key2, false, game)
end

local function AutoKeyPress2()
    while task.wait(0.01) do
        if getgenv().AutoKeyEnabled2 == true then
            KeyPress2()
        else
            break
        end
    end
end

local function KeyPress3()
    VIM:SendKeyEvent(true, getgenv().Key3, false, game)
    task.wait(getgenv().HoldTime3)
    VIM:SendKeyEvent(false, getgenv().Key3, false, game)
end

local function AutoKeyPress3()
    while task.wait(0.01) do
        if getgenv().AutoKeyEnabled3 == true then
            KeyPress3()
        else
            break
        end
    end
end

local function KeyPress4()
    VIM:SendKeyEvent(true, getgenv().Key4, false, game)
    task.wait(getgenv().HoldTime4)
    VIM:SendKeyEvent(false, getgenv().Key4, false, game)
end

local function AutoKeyPress4()
    while task.wait(0.01) do
        if getgenv().AutoKeyEnabled4 == true then
            KeyPress4()
        else
            break
        end
    end
end

local function AutoActivateTool()
    while task.wait(0.01) do
        if getgenv().AutoToolEnabled == true then
            if Player.Character:FindFirstChild(getgenv().Tool) then
	    	task.wait(getgenv().ToolActivateTime)
                Player.Character:FindFirstChild(getgenv().Tool):Activate()
            else
                if getgenv().AutoEquipToolEnabled == true then
		    repeat wait() until Player.Character:FindFirstChild(getgenv().Tool)
		elseif getgenv().AutoEquipToolEnabled == false then
		    break
		end
            end
        else
            break
        end
    end
end

local function AutoEquipTool()
    while task.wait(0.3) do
        if getgenv().AutoEquipToolEnabled == true then
            if not Character:FindFirstChild(getgenv().Tool) then
                Player.Character:WaitForChild("Humanoid"):EquipTool(Player.Backpack:FindFirstChild(getgenv().Tool))
            end 
        else
            break
        end
    end
end

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

Rayfield:Notify({
   Title = "Alert!",
   Content = "All Toggles can be turned off by pressing F1 on your keyboard",
   Duration = 3.5,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
      end
   },
},
})


local Window = Rayfield:CreateWindow({
   Name = "Macro Hub",
   LoadingTitle = "For Macroing Macroers Wow..",
   LoadingSubtitle = "Made by an Iced Raccoon",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = MacroHub, -- Create a custom folder for your hub/game
      FileName = "Macroer Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "sirius", -- The Discord invite code, do not include discord.gg/
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Sirius Hub",
      Subtitle = "Key System",
      Note = "Join the discord (discord.gg/sirius)",
      FileName = "SiriusKey",
      SaveKey = true,
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = "Hello"
   }
})

local Tab1 = Window:CreateTab("Auto Clicking", 10088146939)

local Section = Tab1:CreateSection("Main")

local AutoClickToggle = Tab1:CreateToggle({
   Name = "Enable Auto Clicker",
   CurrentValue = false,
   Flag = "IDGAF BUDDY", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
	getgenv().AutoClickerEnabled = Value
	task.wait()
	AutoClick()
   end,
})

local Section2 = Tab1:CreateSection("Configurations")

local AutoClickerSpeed = Tab1:CreateInput({
   Name = "Auto Clicker Speed",
   PlaceholderText = "0.01",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
      	if tonumber(Text) then
	    getgenv().AutoClickerSpeed = Text
	else
	   Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end	
   end,
})

local Input = Tab1:CreateInput({
   Name = "Auto Click X",
   PlaceholderText = "Broken",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
   	if tonumber(Text) then
	    getgenv().AutoClickX = Text
	else
	   Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end
   end,
})

local Input = Tab1:CreateInput({
   Name = "Auto Click Y",
   PlaceholderText = "Broken",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
   	if tonumber(Text) then
	    getgenv().AutoClickY = Text
	else
	   Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end
   end,
})

local MousePosLabel = Tab1:CreateLabel("Move Mouse Or Re-Execute")

Mouse.Move:Connect(function()
    MousePosLabel:Set("Mouse X Position = "..Mouse.X.." Mouse Y Position = "..Mouse.Y)
end)

local Tab2 = Window:CreateTab("Auto Key", 11746897361)

local Section = Tab2:CreateSection("Key 1")

local AutoKeyToggle1 = Tab2:CreateToggle({
   Name = "Auto Key 1 Toggle",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
	getgenv().AutoKeyEnabled1 = Value
	task.wait()
	AutoKeyPress1()
   end,
})


local Input = Tab2:CreateInput({
   Name = "Key 1",
   PlaceholderText = "W",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	getgenv().Key1 = Text
   end,
})

local Input = Tab2:CreateInput({
   Name = "Key Hold Time",
   PlaceholderText = "0.1",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	if tonumber(Text) then
	    getgenv().HoldTime1 = Text
	else
	   Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end
   end,
})

local Section = Tab2:CreateSection("Key 2")

local AutoKeyToggle2 = Tab2:CreateToggle({
   Name = "Auto Key 2 Toggle",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
	getgenv().AutoKeyEnabled2 = Value
	task.wait()
	AutoKeyPress2()
   end,
})


local Input = Tab2:CreateInput({
   Name = "Key 2",
   PlaceholderText = "A",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	getgenv().Key2 = Text
   end,
})

local Input = Tab2:CreateInput({
   Name = "Key Hold Time",
   PlaceholderText = "0.1",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	if tonumber(Text) then
	    getgenv().HoldTime2 = Text
	else
	   Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end
   end,
})

local Section = Tab2:CreateSection("Key 3")

local AutoKeyToggle3 = Tab2:CreateToggle({
   Name = "Auto Key 3 Toggle",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
	getgenv().AutoKeyEnabled3 = Value
	task.wait()
	AutoKeyPress3()
   end,
})


local Input = Tab2:CreateInput({
   Name = "Key 3",
   PlaceholderText = "S",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	getgenv().Key3 = Text
   end,
})

local Input = Tab2:CreateInput({
   Name = "Key Hold Time",
   PlaceholderText = "0.1",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	if tonumber(Text) then
	    getgenv().HoldTime3 = Text
	else
	   Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end
   end,
})

local Section = Tab2:CreateSection("Key 4")

local AutoKeyToggle4 = Tab2:CreateToggle({
   Name = "Auto Key 4 Toggle",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
	getgenv().AutoKeyEnabled4 = Value
	task.wait()
	AutoKeyPress4()
   end,
})


local Input = Tab2:CreateInput({
   Name = "Key 4",
   PlaceholderText = "D",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	getgenv().Key4 = Text
   end,
})

local Input = Tab2:CreateInput({
   Name = "Key Hold Time",
   PlaceholderText = "0.1",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	if tonumber(Text) then
	    getgenv().HoldTime4 = Text
	else
	   Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end
   end,
})

local Tab3 = Window:CreateTab("Auto Tool", 6594776225)

local Section = Tab3:CreateSection("Toggles")

local AutoActivateTool = Tab3:CreateToggle({
   Name = "Auto Activate Tool",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 	getgenv().AutoToolEnabled = Value
	task.wait()
	AutoActivateTool()
   end,
})

local AutoEquipTool = Tab3:CreateToggle({
   Name = "Auto Equip Tool",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 	getgenv().AutoEquipToolEnabled = Value
	task.wait()
	AutoEquipTool()
   end,
})

local Section = Tab3:CreateSection("Configurations")

local Input = Tab3:CreateInput({
   Name = "Tool",
   PlaceholderText = "Tool Name Here",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	    getgenv().Tool = Text
   end,
})

local Input = Tab3:CreateInput({
   Name = "Tool Activation Wait Time",
   PlaceholderText = "0.1",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
	if tonumber(Text) then
	     getgenv().ToolActivateTime = Text
	else
	    Rayfield:Notify({Title = "Alert!", Content = "Incorrect Value", Duration = 2.5, Image = 4483362458})
	end
   end,
})


local Button = Tab3:CreateButton({
   Name = "Copy Tool Name",
   Callback = function()
  	 if Character:FindFirstChildWhichIsA("Tool") then
            setclipboard(Character:FindFirstChildWhichIsA("Tool").Name)
        else
	        Rayfield:Notify({Title = "Alert!", Content = "Equip a tool first", Duration = 2.5, Image = 4483362458})
        end
   end,
})

local ToolName = Tab3:CreateLabel("Hold a tool to view name")

task.spawn(function()
    while task.wait(1) do
        if Player.Character:FindFirstChildWhichIsA("Tool") then
            ToolName:Set("Tool name = "..Player.Character:FindFirstChildWhichIsA("Tool").Name)
        end
    end
end)

local Tab4 = Window:CreateTab("Local Player", 4483362458)

local Section = Tab4:CreateSection("Humanoid")

local Button = Tab4:CreateButton({
   Name = "Anti-Client Kick",
   Callback = function()
      local mt = getrawmetatable(game)
      local old = mt.__namecall
      local protect = newcclosure or protect_function

      if not protect then
         protect = function(f) return f end
      end

      setreadonly(mt, false)
      mt.__namecall = protect(function(self, ...)
      local method = getnamecallmethod()
      if method == "Kick" then
         wait(9e9)
         return
      end
      return old(self, ...)
      end)
      hookfunction(game:GetService("Players").LocalPlayer.Kick,protect(function() wait(9e9) end))
   end,
})


local Slider = Tab4:CreateSlider({
   Name = "WalkSpeed",
   Range = {16, 200},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "Slider1",
   Callback = function(Value)
      Character:WaitForChild("Humanoid").WalkSpeed = Value
   end,
})

local Slider = Tab4:CreateSlider({
   Name = "JumpPower",
   Range = {50, 250},
   Increment = 1,
   Suffix = "Jump",
   CurrentValue = 50,
   Flag = "Slider1",
   Callback = function(Value)
      Character:WaitForChild("Humanoid").JumpPower = Value
   end,
})

local Slider = Tab4:CreateSlider({
   Name = "HipHeight",
   Range = {1, 75},
   Increment = 1,
   Suffix = "Height",
   CurrentValue = 0,
   Flag = "Slider1",
   Callback = function(Value)
      Character:WaitForChild("Humanoid").HipHeight = Value
   end,
})

local Section2 = Tab4:CreateSection("Destroy")

local Button = Tab4:CreateButton({
   Name = "Left Arm",
   Callback = function()
      if Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R6 then
        Character:FindFirstChild("Left Arm"):Destroy()
      elseif Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R15 then
        Character:FindFirstChild("LeftUpperArm"):Destroy()
      end
   end,
})

local Button = Tab4:CreateButton({
   Name = "Right Arm",
   Callback = function()
      if Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R6 then
        Character:FindFirstChild("Right Arm"):Destroy()
      elseif Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R15 then
        Character:FindFirstChild("RightUpperArm"):Destroy()
      end
   end,
})

local Button = Tab4:CreateButton({
   Name = "Left Leg",
   Callback = function()
      if Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R6 then
        Character:FindFirstChild("Left Leg"):Destroy()
      elseif Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R15 then
        Character:FindFirstChild("LeftUpperLeg"):Destroy()
      end
   end,
})

local Button = Tab4:CreateButton({
   Name = "Right Leg",
   Callback = function()
      if Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R6 then
        Character:FindFirstChild("Right Leg"):Destroy()
      elseif Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R15 then
        Character:FindFirstChild("RightUpperLeg"):Destroy()
      end
   end,
})

local Button = Tab4:CreateButton({
   Name = "Remove Accessories",
   Callback = function()
       for i,v in pairs(Character:GetDescendants()) do
          if v:IsA("Accessory") then
              v:Destroy()
          end
       end
   end,
})

local Section2 = Tab4:CreateSection("Misc")

local Button = Tab4:CreateButton({
   Name = "Refresh",
   Callback = function()
       local RefreshPosition = Character.HumanoidRootPart.CFrame
       task.wait()
       Character:Destroy()
       game:GetService("Workspace"):WaitForChild(Player.Name)
       Character:WaitForChild("HumanoidRootPart").CFrame = RefreshPosition
   end,
})

local Toggle = Tab4:CreateToggle({
   Name = "Disable Seats",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   	if Value == true then
	   for i,v in pairs(workspace) do
	      if v:IsA("Seat") then
	         v.Disabled = true
	      end
	   end
	elseif Value == false then
	     for i,v in pairs(workspace) do
	       if v:IsA("Seat") then
	          v.Disabled = false
	       end
	    end
	end
   end,
})

UIS.InputBegan:Connect(function(inp, typing)
    if inp.KeyCode == Enum.KeyCode.F1 then
        if typing then return end
        AutoEquipTool:Set(false)
        AutoActivateTool:Set(false)
        AutoKeyToggle1:Set(false)
        AutoKeyToggle2:Set(false)
        AutoKeyToggle3:Set(false)
        AutoKeyToggle4:Set(false)
        AutoClickToggle:Set(false)  
    end
end)
